name: "CI"

on:
  push:
    branches: 
      - "main"
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: 
      - "main"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: read
  packages: write

jobs:
  # Cleanup job runs on GitHub's ubuntu runner (has Docker)
  cleanup:
    runs-on: ubuntu-latest
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Cleanup old container images
        uses: snok/container-retention-policy@v3.0.0
        with:
          account: ${{ github.repository_owner }}
          token: ${{ secrets.GITHUB_TOKEN }}
          image-names: ${{ github.event.repository.name }}
          cut-off: 1m
          keep-n-most-recent: 1
          dry-run: true  # Change to false after testing

  # Build job runs on your custom runner (has Nix)
  build:
    runs-on: ${{ matrix.os }}
    needs: cleanup  # Wait for cleanup to finish first
    strategy:
      matrix:
        os: [x86_64-linux]
        system: [x86_64-linux]
        arch: [amd64]
    steps:
      - uses: actions/checkout@v4
      
      - name: Build all flake outputs
        run: om ci
      
      - name: Build And Push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          DOCKER_REGISTRY: ghcr.io
        run: |
          nix build .#packages.${{ matrix.system }}.dockerImage
          
          BASE_IMAGE="$(nix eval --raw .#packages.${{ matrix.system }}.dockerImage.imageName):$(nix eval --raw .#packages.${{ matrix.system }}.dockerImage.imageTag)"
          echo "BASE_IMAGE=${BASE_IMAGE}"
          
          mkdir -p /tmp/docker-image
          
          echo "Extracting image to /tmp/docker-image/image.tar"
          gunzip -c ./result > /tmp/docker-image/image.tar || cp ./result /tmp/docker-image/image.tar
          
          echo "${{ secrets.GITHUB_TOKEN }}" | crane auth login ${DOCKER_REGISTRY} -u "${{ github.actor }}" --password-stdin
          
          echo "Pushing image to ${BASE_IMAGE}"
          crane push /tmp/docker-image/image.tar "${BASE_IMAGE}"
          
          rm -rf /tmp/docker-image
          
          crane auth logout ${DOCKER_REGISTRY}
          
          echo "Push complete"